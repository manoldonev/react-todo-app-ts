{"version":3,"file":"static/js/407.b477774a.chunk.js","mappings":"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","sources":["routes/tasks/Todos/hooks/useTodos.ts","utils.ts","components/SwipeToAction/BackgroundLayer.tsx","components/SwipeToAction/ForegroundLayer.tsx","components/SwipeToAction/SwipeToAction.tsx","routes/tasks/TodoItem/ActionBar.tsx","routes/tasks/TodoItem/TodoItem.tsx","routes/tasks/TodoItem/hooks/useUpdateTodo.ts","routes/tasks/TodoItem/hooks/useDeleteTodo.ts","routes/tasks/Todos/Todos.tsx","routes/tasks/CtaButton/CtaButton.tsx","routes/tasks/Tasks.tsx"],"sourcesContent":["import type { IntersectionObserverHookRefCallback } from 'react-intersection-observer-hook';\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\nimport type { InfiniteData } from 'react-query';\nimport { useAtom } from 'jotai';\nimport type { TodosQuery } from '../../../../generated';\nimport { useInfiniteTodosQuery } from '../../../../generated';\nimport { convertRemToPixels } from '../../../../utils';\nimport { queryAtom } from '../../../layout/Header';\n\nconst enum SortDirection {\n  Ascending = 'asc',\n  Descending = 'desc',\n}\n\nconst defaultPage = 1;\nconst pageSize = 10;\nconst sortField = 'id';\nconst sortDirection = SortDirection.Descending;\n\nconst useTodos = (): {\n  data: InfiniteData<TodosQuery> | undefined;\n  isFetching: boolean;\n  sentryRef: IntersectionObserverHookRefCallback;\n} => {\n  const [query] = useAtom(queryAtom);\n  let input = null;\n  if (query !== '') {\n    // TODO: case-insensitive search\n    input = { task_contains: query };\n  }\n\n  const queryVariables = {\n    page: defaultPage,\n    limit: pageSize,\n    input,\n    sort: sortField,\n    direction: sortDirection,\n  };\n\n  const { data, hasNextPage, fetchNextPage, isFetchingNextPage, isError } = useInfiniteTodosQuery(\n    'page',\n    queryVariables,\n    {\n      getNextPageParam: (_lastPage, allPages) => {\n        // TODO: switch fakeQL implementation to generalize condition\n        if (allPages.length < 5) {\n          return { page: allPages.length + 1 };\n        }\n\n        return null;\n      },\n    },\n  );\n\n  const [sentryRef] = useInfiniteScroll({\n    loading: isFetchingNextPage,\n    hasNextPage: hasNextPage ?? false,\n    onLoadMore: fetchNextPage,\n    disabled: isError,\n    rootMargin: `0px 0px ${convertRemToPixels(6.25)}px 0px`,\n  });\n\n  const isFetching = isFetchingNextPage || (hasNextPage ?? false);\n\n  return { data, isFetching, sentryRef };\n};\n\nexport { useTodos };\n","const convertRemToPixels = (rem: number): number => {\n  return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);\n};\n\nexport { convertRemToPixels };\n","import { forwardRef } from 'react';\nimport type { SwipeDirections } from 'react-swipeable';\nimport { LEFT } from 'react-swipeable';\n\nconst BackgroundLayer = forwardRef<\n  HTMLDivElement,\n  { children: React.ReactNode; className: string | undefined; swipeDirection: SwipeDirections }\n>(({ children, className, swipeDirection }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={`absolute flex items-center w-full h-full px-6 ${\n        swipeDirection === LEFT ? 'justify-end' : 'justify-start'\n      } ${className ?? ''}`}\n    >\n      {children}\n    </div>\n  );\n});\n\nexport { BackgroundLayer };\n","import type { MouseEventHandler } from 'react';\nimport { forwardRef } from 'react';\n\nconst ForegroundLayer = forwardRef<\n  HTMLDivElement,\n  {\n    children: React.ReactNode;\n    className: string | undefined;\n    onMouseDown: MouseEventHandler<HTMLDivElement> | undefined;\n  }\n>(({ children, className, onMouseDown }, ref) => {\n  return (\n    <div\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      onMouseDown={onMouseDown}\n      ref={ref}\n      role=\"none\"\n      className={`touch-pan-y relative w-full h-full ${className ?? ''}`}\n    >\n      {children}\n    </div>\n  );\n});\n\nexport { ForegroundLayer };\n","import { useRef, useState } from 'react';\nimport type { SwipeCallback, SwipeDirections, TapCallback } from 'react-swipeable';\nimport { useSwipeable, LEFT, RIGHT } from 'react-swipeable';\nimport { BackgroundLayer } from './BackgroundLayer';\nimport { ForegroundLayer } from './ForegroundLayer';\n\n// TODO: consider twin.macro for this component?\nconst SwipeToAction = ({\n  children,\n  leftChildren,\n  rightChildren,\n  threshold = 0.3,\n  onSwipedLeft,\n  onSwipedRight,\n  onTap,\n  leftChildrenClassName,\n  rightChildrenClassName,\n  className,\n}: {\n  children: React.ReactNode;\n  leftChildren: React.ReactNode;\n  rightChildren: React.ReactNode;\n  threshold?: number;\n  onSwipedLeft?: SwipeCallback;\n  onSwipedRight?: SwipeCallback;\n  onTap?: TapCallback;\n  leftChildrenClassName?: string;\n  rightChildrenClassName?: string;\n  className?: string;\n}): JSX.Element => {\n  const foregroundRef = useRef<HTMLDivElement | null>(null);\n  const backgroundRef = useRef<HTMLDivElement | null>(null);\n  const [swipeDirection, setSwipeDirection] = useState<SwipeDirections>(LEFT);\n  const isHorizontalSwipe = useRef(false);\n\n  const swipeableHandlers = useSwipeable({\n    // if tracking mouse see https://github.com/FormidableLabs/react-swipeable/issues/231 for a workaround\n    trackMouse: false,\n    onTap,\n    onSwipeStart: (eventData) => {\n      isHorizontalSwipe.current = eventData.dir === LEFT || eventData.dir === RIGHT;\n\n      if (!isHorizontalSwipe.current) {\n        return;\n      }\n\n      if (foregroundRef.current) {\n        foregroundRef.current.style.transition = '';\n        foregroundRef.current.style.transform = '';\n      }\n    },\n    onSwiping: (eventData) => {\n      if (!isHorizontalSwipe.current) {\n        return;\n      }\n\n      // allow switching between left / right swipe on the go\n      setSwipeDirection(eventData.dir);\n\n      if (foregroundRef.current) {\n        const transform = `translateX(${eventData.deltaX}px)`;\n        foregroundRef.current.style.transform = transform;\n      }\n\n      if (backgroundRef.current) {\n        const opacity = Math.min(Math.abs(eventData.deltaX) / 100, 1);\n        backgroundRef.current.style.opacity = opacity.toFixed(2);\n      }\n    },\n    onSwiped: (eventData) => {\n      if (!isHorizontalSwipe.current) {\n        return;\n      }\n\n      if (!foregroundRef.current) {\n        return;\n      }\n\n      let left = eventData.deltaX;\n      const { offsetWidth } = foregroundRef.current;\n      if (Math.abs(left) >= offsetWidth * threshold) {\n        left = eventData.dir === LEFT ? -offsetWidth * 2 : offsetWidth;\n\n        if (eventData.dir === LEFT && onSwipedLeft) {\n          onSwipedLeft(eventData);\n        } else if (eventData.dir === RIGHT && onSwipedRight) {\n          onSwipedRight(eventData);\n        }\n      } else {\n        left = 0;\n      }\n\n      foregroundRef.current.style.transition = 'transform 0.5s ease-out';\n      foregroundRef.current.style.transform = `translateX(${left}px)`;\n    },\n  });\n\n  const refPassthrough = (element: HTMLDivElement): void => {\n    swipeableHandlers.ref(element);\n    foregroundRef.current = element;\n  };\n\n  return (\n    <div className=\"relative w-full overflow-hidden\">\n      <BackgroundLayer\n        ref={backgroundRef}\n        className={swipeDirection === LEFT ? rightChildrenClassName : leftChildrenClassName}\n        swipeDirection={swipeDirection}\n      >\n        {swipeDirection === LEFT ? rightChildren : leftChildren}\n      </BackgroundLayer>\n      {/* eslint-disable-next-line @typescript-eslint/unbound-method */}\n      <ForegroundLayer ref={refPassthrough} className={className} onMouseDown={swipeableHandlers.onMouseDown}>\n        {children}\n      </ForegroundLayer>\n    </div>\n  );\n};\n\nexport { SwipeToAction };\n","import { BellIcon, ColorSwatchIcon, PencilAltIcon, TrashIcon } from '@heroicons/react/outline';\n\nconst ActionBar = ({ className = '', onDelete }: { className?: string; onDelete: () => void }): JSX.Element => {\n  return (\n    <div className={`flex gap-1 justify-end text-on-primary-container ${className}`}>\n      <button type=\"button\" className=\"group\" disabled aria-label=\"Set Reminder\">\n        <BellIcon className=\"w-6 h-6 p-1 group-disabled:text-on-primary-container/25\" />\n      </button>\n      <button type=\"button\" className=\"group\" disabled aria-label=\"Background Options\">\n        <ColorSwatchIcon className=\"w-6 h-6 p-1 group-disabled:text-on-primary-container/25\" />\n      </button>\n      <button type=\"button\" className=\"group\" disabled aria-label=\"Edit Item\">\n        <PencilAltIcon className=\"w-6 h-6 p-1 group-disabled:text-on-primary-container/25\" />\n      </button>\n      <button type=\"button\" onClick={onDelete} aria-label=\"Delete Item\">\n        <TrashIcon className=\"w-6 h-6 p-1 hover:border hover:border-secondary rounded-xl hover:bg-secondary-container hover:text-on-secondary-container\" />\n      </button>\n    </div>\n  );\n};\n\nexport { ActionBar };\n","import { TrashIcon } from '@heroicons/react/outline';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { SwipeToAction } from '../../../components/SwipeToAction';\nimport { ActionBar } from './ActionBar';\nimport { useDeleteTodo } from './hooks/useDeleteTodo';\nimport { useUpdateTodo } from './hooks/useUpdateTodo';\n\nconst TodoItem = ({\n  data,\n}: {\n  data: { id: string; task: string; done: boolean } | undefined | null;\n}): JSX.Element | null => {\n  const isTouchEnabled = useMediaQuery('(pointer: coarse)');\n  const { mutate: updateTodo } = useUpdateTodo();\n  const { mutate: deleteTodo } = useDeleteTodo();\n\n  if (data == null) {\n    return null;\n  }\n\n  const toggleItem = (): void => {\n    updateTodo({ id: data.id, input: { done: !data.done } });\n  };\n\n  const deleteItem = (): void => {\n    deleteTodo({ id: data.id });\n  };\n\n  if (!isTouchEnabled) {\n    return (\n      <li className=\"w-full mb-3 group last:mb-20 xs:w-56 md:w-60\">\n        <div className=\"px-3 transition-colors border rounded-lg bg-primary-container border-outline text-on-primary-container\">\n          <h3\n            className={`${data.done ? 'line-through text-on-primary-container/60' : ''}`}\n          >{`Lorem Ipsum #${data.id}`}</h3>\n          <label\n            htmlFor={data.id}\n            className={`flex line-clamp-3 ${data.done ? 'line-through text-on-primary-container/60' : ''}`}\n          >\n            <input\n              type=\"checkbox\"\n              className=\"flex-initial mx-2 accent-secondary\"\n              id={data.id}\n              checked={data.done}\n              onChange={toggleItem}\n            />\n            {data.task}\n          </label>\n          <ActionBar\n            className=\"my-1 transition-opacity duration-500 opacity-0 group-focus-within:opacity-100 group-hover:opacity-100\"\n            onDelete={deleteItem}\n          />\n        </div>\n      </li>\n    );\n  }\n\n  return (\n    <li className=\"w-full mb-3 last:mb-20 xs:w-56 md:w-60\">\n      <SwipeToAction\n        className=\"px-3 pb-3 transition-colors border rounded-lg border-outline bg-primary-container text-on-primary-container\"\n        onTap={toggleItem}\n        onSwipedLeft={deleteItem}\n        onSwipedRight={deleteItem}\n        leftChildren={<TrashIcon className=\"w-6 h-6\" />}\n        leftChildrenClassName=\"bg-error-container text-on-error-container border border-outline rounded-lg\"\n        rightChildren={<TrashIcon className=\"w-6 h-6\" />}\n        rightChildrenClassName=\"bg-error-container text-on-error-container border border-outline rounded-lg\"\n      >\n        <h3\n          className={`${data.done ? 'line-through text-on-primary-container/60' : ''}`}\n        >{`Lorem Ipsum #${data.id}`}</h3>\n        <label className={`flex line-clamp-3 ${data.done ? 'line-through text-on-primary-container/60' : ''}`}>\n          {data.task}\n        </label>\n      </SwipeToAction>\n    </li>\n  );\n};\n\nexport { TodoItem };\n","import type { UseMutationResult } from 'react-query';\nimport { useQueryClient } from 'react-query';\nimport type { UpdateTodoMutation, UpdateTodoMutationVariables } from '../../../../generated';\nimport { useUpdateTodoMutation } from '../../../../generated';\n\nconst useUpdateTodo = (): UseMutationResult<UpdateTodoMutation, Error, UpdateTodoMutationVariables> => {\n  const queryClient = useQueryClient();\n\n  return useUpdateTodoMutation({\n    onSuccess: async () => queryClient.invalidateQueries('Todos.infinite'),\n  });\n};\n\nexport { useUpdateTodo };\n","import type { UseMutationResult } from 'react-query';\nimport { useQueryClient } from 'react-query';\nimport type { DeleteTodoMutation, DeleteTodoMutationVariables } from '../../../../generated';\nimport { useDeleteTodoMutation } from '../../../../generated';\n\nconst useDeleteTodo = (): UseMutationResult<DeleteTodoMutation, Error, DeleteTodoMutationVariables> => {\n  const queryClient = useQueryClient();\n\n  return useDeleteTodoMutation({\n    onSuccess: async () => queryClient.invalidateQueries('Todos.infinite'),\n  });\n};\n\nexport { useDeleteTodo };\n","import { EmojiSadIcon } from '@heroicons/react/outline';\nimport Masonry from 'react-masonry-component';\nimport { useAtom } from 'jotai';\nimport { convertRemToPixels } from '../../../utils';\nimport { TodoItem } from '../TodoItem';\nimport { useTodos } from './hooks/useTodos';\nimport { queryAtom } from '../../layout/Header';\n\nconst Todos = (): JSX.Element => {\n  const { data, isFetching, sentryRef } = useTodos();\n  const [query, setQuery] = useAtom(queryAtom);\n  const masonryOptions = {\n    gutter: convertRemToPixels(0.75),\n    stagger: '0.03s',\n    horizontalOrder: false,\n  };\n\n  return (\n    <div className=\"p-1.5 bg-background transition-colors min-h-screen\">\n      <Masonry elementType=\"ul\" options={masonryOptions}>\n        {data?.pages.map((page) => page.todos?.map((todo) => <TodoItem key={todo?.id} data={todo} />))}\n        {isFetching && (\n          <li ref={sentryRef}>\n            <h3 className=\"text-on-background\">Loading...</h3>\n          </li>\n        )}\n      </Masonry>\n      {!isFetching && (data?.pages.length === 0 || data?.pages[0].todos?.length === 0) && (\n        <div className=\"flex items-center justify-center min-h-screen pb-40 text-on-background\">\n          <div className=\"flex flex-col items-center\">\n            <EmojiSadIcon className=\"w-40 h-40\" />\n            <span>No items available</span>\n            {query !== '' && (\n              <button\n                type=\"button\"\n                onClick={() => setQuery('')}\n                className=\"text-secondary bg-background hover:text-on-secondary border border-secondary outline-none hover:bg-secondary-variant focus:ring-4 focus:ring-secondary/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center mt-2\"\n              >\n                Reset Search\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { Todos };\n","import { PlusIcon } from '@heroicons/react/outline';\nimport { useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useHeadroom } from '../../../components/Headroom';\n\nconst CtaButton = ({ className = '' }: { className?: string }): JSX.Element => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  useHeadroom(buttonRef, {\n    headroomOptions: {\n      classes: {\n        initial: 'transition-transform duration-300 will-change-transform',\n        pinned: 'translate-x-0',\n        unpinned: 'translate-x-[5rem]',\n      },\n    },\n  });\n\n  return (\n    <button\n      ref={buttonRef}\n      type=\"button\"\n      aria-label=\"Add new item\"\n      onClick={() => navigate('/tasks/new', { state: { backgroundLocation: location } })}\n      className={`text-on-secondary transition duration-200 ease-in bg-secondary rounded-full shadow w-14 h-14 hover:bg-secondary-variant active:shadow-lg focus:outline-none ${className}`}\n    >\n      <PlusIcon />\n    </button>\n  );\n};\n\nexport { CtaButton };\n","import { Route, Routes, useLocation } from 'react-router-dom';\nimport { NewTask, NewTaskModal } from '..';\nimport { Todos } from './Todos';\nimport { CtaButton } from './CtaButton';\n\nconst Tasks = (): JSX.Element => {\n  const location = useLocation();\n  const state = location.state as { backgroundLocation?: Location } | null | undefined;\n\n  return (\n    <>\n      <Routes location={state?.backgroundLocation ?? location}>\n        <Route\n          path=\"/\"\n          element={\n            <>\n              <Todos />\n              {/* TODO: FAB accessibility and/or keyboard hotkey */}\n              <CtaButton className=\"fixed z-10 md:bottom-8 bottom-24 right-6\" />\n            </>\n          }\n        />\n        <Route path=\"/new\" element={<NewTask />} />\n      </Routes>\n\n      {/* open route in a modal dialog only if navigating from within /tasks */}\n      {state?.backgroundLocation && (\n        <Routes>\n          <Route path=\"/new\" element={<NewTaskModal />} />\n        </Routes>\n      )}\n    </>\n  );\n};\n\nexport { Tasks };\n"],"names":["SortDirection","convertRemToPixels","rem","parseFloat","getComputedStyle","document","documentElement","fontSize","BackgroundLayer","forwardRef","ref","children","className","swipeDirection","LEFT","ForegroundLayer","onMouseDown","role","SwipeToAction","leftChildren","rightChildren","threshold","onSwipedLeft","onSwipedRight","onTap","leftChildrenClassName","rightChildrenClassName","foregroundRef","useRef","backgroundRef","useState","setSwipeDirection","isHorizontalSwipe","swipeableHandlers","useSwipeable","trackMouse","onSwipeStart","eventData","current","dir","RIGHT","style","transition","transform","onSwiping","deltaX","opacity","Math","min","abs","toFixed","onSwiped","left","offsetWidth","element","ActionBar","onDelete","type","disabled","onClick","TodoItem","data","isTouchEnabled","useMediaQuery","queryClient","useQueryClient","useUpdateTodoMutation","onSuccess","invalidateQueries","useUpdateTodo","updateTodo","mutate","useDeleteTodoMutation","useDeleteTodo","deleteTodo","toggleItem","id","input","done","deleteItem","task","htmlFor","checked","onChange","sortDirection","Descending","Todos","useAtom","queryAtom","query","task_contains","queryVariables","page","limit","sort","direction","useInfiniteTodosQuery","getNextPageParam","_lastPage","allPages","length","hasNextPage","fetchNextPage","isFetchingNextPage","isError","useInfiniteScroll","loading","onLoadMore","rootMargin","isFetching","sentryRef","useTodos","setQuery","masonryOptions","gutter","stagger","horizontalOrder","elementType","options","pages","map","todos","todo","CtaButton","location","useLocation","navigate","useNavigate","buttonRef","useHeadroom","headroomOptions","classes","initial","pinned","unpinned","state","backgroundLocation","Tasks","path"],"sourceRoot":""}